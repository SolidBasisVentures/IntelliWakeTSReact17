/**
 * When inserting a new item in an array on the client, the id for that new item has not been generated by the server yet.
 * However, if the new item is not ready to be saved because not all required fields are entered, then there will not be an ID until saved.
 * When saved, the server will return an ID.
 * If the map() index is based on the ID, then React will destroy the old object and create a new one, which will throw off the "focus" for the user.
 * The following library is built to handle this by generating a client-side managed UUID that can be used as the map() index so that even when the id changes from undefined | null | 0 to a valid number, the UUID will persist.
 *
 * To use this library:
 * 		First, call and store the arrayIDMapsForArrayWithID() value so that it can generate the UUIDs for the known entities.  This function should be called every time a new row is inserted or an ID is saved on an existing row.  Only a single id=undefined|null|0 should exist in the array at any one time, so that on a subsequent save it will be matched to the UUID with undefined|null|0 on it.
 * 		Second, use the mapFromArrayIDMaps() as the map() function for displaying the array values with a consistent index
 */
import { ReactNode, ReactNodeArray } from 'react';
export interface IArrayIDMap {
    originalID: number | null;
    uuid: string;
}
export declare const arrayIDMapsForArrayWithID: (arrayValues: any[], existingArrayIDMaps: IArrayIDMap[]) => IArrayIDMap[];
export declare const arrayMapWithMapIDIndex: <T>(arrayValues: T[], arrayIDMaps: IArrayIDMap[], map: (arrayValue: T, idx: string) => ReactNode) => ReactNodeArray;
